import numpy as np
import pandas as pd
df = pd.read_csv("/content/drive/MyDrive/DL/1_boston_housing.csv")
df.head()

df.info()

from sklearn.model_selection import train_test_split

X = df.loc[:, df.columns != 'MEDV']
y = df.loc[:, df.columns == 'MEDV']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=123)


from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Assuming you have already split your data into training and testing sets (X_train, X_test, y_train, y_test)

# Linear Regression model
regressor = LinearRegression()

# Fitting the model
regressor.fit(X_train, y_train)

# Predictions on the test set
y_pred = regressor.predict(X_test)

# Calculating mean squared error and mean absolute error
mse_lr = mean_squared_error(y_test, y_pred)
mae_lr = mean_absolute_error(y_test, y_pred)

print('Mean squared error on test data: ', mse_lr)
print('Mean absolute error on test data: ', mae_lr)

from sklearn.preprocessing import StandardScaler
mms = StandardScaler()
mms.fit(X_train)
X_train = mms.transform(X_train)
X_test = mms.transform(X_test)


from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()

model.add(Dense(128, input_shape=(13, ), activation='relu', name='dense_1'))
model.add(Dense(64, activation='relu', name='dense_2'))
model.add(Dense(32, activation='relu', name='dense_3'))
model.add(Dense(16, activation='relu', name='dense_4'))
model.add(Dense(1, activation='relu', name='dense_output'))

model.compile(optimizer='adam', loss='mse', metrics=['mae'])
model.summary()


history = model.fit(X_train, y_train, epochs=100, validation_split=0.05, verbose = 1)


mse_nn, mae_nn = model.evaluate(X_test, y_test)

print('Mean squared error on test data: ', mse_nn)
print('Mean absolute error on test data: ', mae_nn)

import sklearn
new_data = [[11.5779, 0,18.1, 0, 0.7, 5.036, 97, 1.77, 3, 666, 20.2, 396.9, 25.68]]
new_data = sklearn.preprocessing.StandardScaler().fit_transform((new_data))
prediction = model.predict(new_data)
print("Predicted house price:", prediction)#9.7  ==394